name: 'Setup GPG'
description: 'Configures this action to run gpg with a given key and pass'
inputs:
  gpg-private-key:
    description: 'GPG private key exported as an ASCII armored version or its base64 encoding'
    required: true
  gpg-key-pass:
    description: 'Passphrase of the GPG private key'
    required: true
  gpg-public-key:
    description: 'GPG public key exported as an ASCII armored version or its base64 encoding'
    required: true
  gpg-key-name:
    description: 'GPG key name'
    required: true
    default: "aerospike-inc"
  gpg-trust-level:
    description: 'Set key trust level'
    required: false
    default: 5
runs:
  using: "composite"
  steps:
      - name: "check if private key is empty"
        env: 
            GPG_PRIVATE_KEY: ${{ inputs.gpg-private-key }}
        if: ${{ env.GPG_PRIVATE_KEY == '' }}
        run: |
          echo "The gpg-private-key was empty"
          exit 1
        shell: bash
      - name: "check if public key is empty"
        env:
            GPG_PUBLIC_KEY: ${{ inputs.gpg-public-key }}
        if: ${{ env.GPG_PUBLIC_KEY == '' }}
        run: |
          echo "The gpg-public-key was empty"
          exit 1
        shell: bash
      - name: "check if key name is empty"
        env: 
            GPG_ID: ${{ inputs.gpg-key-name }}
        if: ${{ env.GPG_ID == '' }}
        run: |
          echo "The gpg-key-name was empty"
          exit 1
        shell: bash
      - name: "check if key pass is empty"
        env: 
            GPG_KEY_PASS: ${{ inputs.gpg-key-pass }}
        if: ${{ env.GPG_KEY_PASS == '' }}
        run: |
          echo "The secret gpg-key-pass was empty"
          exit 1
        shell: bash
      - name: install tools
        run: |
          sudo apt-get update && sudo apt-get install ca-certificates gnupg dpkg-dev dpkg-sig rpm -y
        shell: bash
      - name: Set up GPG
        env:
          GPG_PRIVATE_KEY: ${{ inputs.gpg-private-key }}
          GPG_KEY_PASS: ${{ inputs.gpg-key-pass }}
          GPG_ID: ${{ inputs.gpg-key-name }}
          GPG_PUBLIC_KEY: ${{ inputs.gpg-public-key }}
        run: |
          # Setup gpg
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "$GPG_PRIVATE_KEY" | gpg --import --batch --yes
          echo "$GPG_KEY_PASS"

          # configure for non-interactive use
          export GPG_TTY=no-tty
          echo -e "pinentry-mode loopback\nuse-agent" >> ~/.gnupg/gpg.conf
          echo -e "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf

          # configure rpm's
          echo -e "$GPG_KEY_PASS" >> ~/.gnupg/.pass
          echo -e "$GPG_PUBLIC_KEY" >> ~/.gnupg/.public_key.asc
          cp setup-gpg/.rpmmacros ~/.rpmmacros
          rpm --import ~/.gnupg/.public_key.asc 

          # reload agent
          gpg-connect-agent reloadagent /bye
        shell: bash
